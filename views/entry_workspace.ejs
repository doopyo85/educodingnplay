<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Entry Workspace</title>

    <!-- Entry CSS -->
    <link href="/js/entry/entry.css" rel="stylesheet" />
    
    <!-- 의존성 라이브러리들 -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.21/lodash.min.js"></script>
    <script src="https://code.createjs.com/1.0.0/preloadjs.min.js"></script>
    <script src="https://code.createjs.com/1.0.0/easeljs.min.js"></script>
    <script src="https://code.createjs.com/1.0.0/soundjs.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jqueryui/1.12.1/jquery-ui.min.js"></script>
    
    <style>
        html, body {
            margin: 0;
            padding: 0;
            width: 100%;
            height: 100%;
            overflow: hidden;
        }
        #workspace {
            width: 100%;
            height: 100%;
        }
    </style>
</head>
<body>
    <div id="workspace"></div>
    
    <!-- EntryJS 로드 -->
    <script src="/js/entry/entry.js"></script>
    
    <script>
        // EntryVideoLegacy를 빈 객체로 정의하여 오류 회피
        window.EntryVideoLegacy = {};
        
        // 프로젝트 파일 로드 및 초기화
        document.addEventListener('DOMContentLoaded', async function() {
            const projectFile = '<%= projectFile %>';
            
            // 메시지 수신 처리
            window.addEventListener('message', async function(event) {
                console.log('Message received:', event.data);
                // 모든 도메인에서의 메시지 허용 (개발 환경)
                if (event.data && event.data.type === 'loadProject') {
                    await loadEntryProject(event.data.projectFile);
                }
            });
            
            // URL 파라미터로 전달된 경우 처리
            if (projectFile) {
                console.log('Loading project from URL parameter:', projectFile);
                await loadEntryProject(projectFile);
            } else {
                console.log('No project file specified, initializing empty editor');
                initializeEntry();
            }
            
            // Entry 프로젝트 로드 함수
            async function loadEntryProject(projectUrl) {
                try {
                    console.log('Fetching project:', projectUrl);
                    const response = await fetch(projectUrl);
                    const projectData = await response.json();
                    console.log('Project data loaded');
                    
                    // 초기화 후 로드
                    initializeEntry(projectData);
                } catch (error) {
                    console.error('프로젝트 로드 실패:', error);
                    initializeEntry();
                }
            }
            
            // Entry 초기화 함수
            function initializeEntry(projectData) {
                try {
                    console.log('Initializing Entry');
                    // EntryJS 생성자가 있는 경우
                    if (typeof Entry === 'function') {
                        console.log('Entry is a constructor');
                        window.entryInstance = new Entry({
                            container: 'workspace'
                        });
                        
                        if (projectData) {
                            window.entryInstance.loadProject(projectData);
                        }
                        window.entryInstance.start();
                    }
                    // EntryJS가 객체로 노출된 경우
                    else if (typeof Entry === 'object') {
                        console.log('Entry is an object');
                        if (typeof Entry.initWorkspace === 'function') {
                            Entry.initWorkspace({
                                container: 'workspace'
                            });
                        } else if (typeof Entry.init === 'function') {
                            Entry.init({
                                container: 'workspace'
                            });
                        } else {
                            console.warn('No suitable initialization method found for Entry');
                        }
                        
                        if (projectData) {
                            Entry.loadProject(projectData);
                        } else {
                            Entry.loadProject();
                        }
                        Entry.start();
                    } else {
                        console.error('Entry is not available:', typeof Entry);
                    }
                    console.log('Entry initialization completed');
                } catch (error) {
                    console.error('Entry 초기화 오류:', error);
                }
            }
        });
    </script>
</body>
</html>