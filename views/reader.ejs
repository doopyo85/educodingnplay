<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PDF 뷰어</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css">
    <!-- Turn.js CSS 추가 -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/turn.js/4.1.0/turn.min.css">
</head>
<body>
    <%- include('partials/header') %>

    <div class="container mt-5">
        <div id="flipbook" class="mt-5"></div> <!-- PDF를 Flipbook으로 보여줄 영역 -->
    </div>

    <!-- jQuery를 먼저 로드 -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <!-- PDF.js -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.10.377/pdf.min.js"></script>
    <!-- Turn.js -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/turn.js/4.1.0/turn.min.js"></script>

    <script>
        document.addEventListener("DOMContentLoaded", function() {
            const pdfUrl = "<%= pdfUrl %>";  // 서버에서 전달된 PDF URL

            if (pdfUrl) {
                loadPDFInFlipbook(pdfUrl);  // PDF를 Flipbook으로 로드
            } else {
                document.getElementById('flipbook').innerHTML = '<p>PDF URL이 제공되지 않았습니다.</p>';
            }
        });

        // PDF를 Flipbook으로 로드하는 함수
        function loadPDFInFlipbook(pdfUrl) {
            const flipbook = document.getElementById('flipbook');
            flipbook.innerHTML = '';  // 기존 내용을 초기화

            // PDF.js 웹 워커 비활성화
            pdfjsLib.GlobalWorkerOptions.workerSrc = null;

            pdfjsLib.getDocument(pdfUrl).promise.then(pdfDoc => {
                let promises = [];

                for (let pageNum = 1; pageNum <= pdfDoc.numPages; pageNum++) {
                    promises.push(pdfDoc.getPage(pageNum).then(page => {
                        const canvas = document.createElement('canvas');
                        const context = canvas.getContext('2d');
                        const viewport = page.getViewport({ scale: 1.5 });

                        canvas.height = viewport.height;
                        canvas.width = viewport.width;

                        const renderContext = {
                            canvasContext: context,
                            viewport: viewport
                        };

                        return page.render(renderContext).promise.then(() => {
                            flipbook.appendChild(canvas);  // Flipbook에 페이지 추가
                        });
                    }));
                }

                // 모든 페이지가 렌더링된 후 Flipbook 초기화
                Promise.all(promises).then(() => {
                    $(flipbook).turn({
                        width: 800,
                        height: 600,
                        autoCenter: true
                    });
                });
            }).catch(error => {
                console.error("PDF를 로드하는 중 오류가 발생했습니다: ", error);
                flipbook.innerHTML = '<p>PDF를 로드하는 중 오류가 발생했습니다.</p>';
            });
        }
    </script>
</body>
</html>
