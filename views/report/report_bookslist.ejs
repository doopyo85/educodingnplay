<!-- CSS 파일 참조 추가 -->
<link rel="stylesheet" href="/css/report.css">
<link rel="stylesheet" href="/css/report_bookslist.css">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.3/font/bootstrap-icons.css">

<%- include('../partials/header') %>

<div class="container mt-5"> 
  <div class="row mb-4">
    <div class="col-md-8 offset-md-2">
      <h1 class="text-center fw-bold mb-2">월간 학습리포트 POD</h1>
      <p class="text-center text-muted">교재 카테고리와 호수를 선택하여 학습 리포트를 생성하세요</p>
    </div>
  </div>
  
  <div class="row">
    <div class="col-md-10 offset-md-1">
      <!-- 코스 컨테이너 -->
      <div class="card shadow-sm">
        <div class="card-header bg-primary text-white">
          <h4 class="mb-0">교재 선택</h4>
        </div>
        <div class="card-body p-3" id="categoryContainer">
          <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
              <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-2">교재 정보를 불러오는 중...</p>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Bootstrap JavaScript 명시적 로드 추가 -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>

<%- include('../partials/footer') %>

<!-- 칸아카데미 스타일 CSS -->
<style>
  /* 칸아카데미 스타일 */
  .khan-category {
    margin-bottom: 2rem;
    border-radius: 8px;
    overflow: hidden;
  }
  
  .khan-category-header {
    background-color: #1865f2;
    color: white;
    padding: 15px 20px;
    display: flex;
    align-items: center;
  }
  
  .khan-category-title {
    font-size: 1.3rem;
    font-weight: 700;
    margin: 0;
    flex-grow: 1;
  }
  
  .khan-category-container {
    background-color: #f7f8fa;
    padding: 20px;
    border: 1px solid #e8e9eb;
    border-top: none;
  }
  
  .khan-book-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
    gap: 20px;
  }
  
  .khan-book-card {
    background: white;
    border-radius: 8px;
    box-shadow: 0 1px 3px rgba(0,0,0,0.12);
    transition: transform 0.2s, box-shadow 0.2s;
    overflow: hidden;
    display: flex;
    flex-direction: column;
    height: 100%;
  }
  
  .khan-book-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 4px 8px rgba(0,0,0,0.1);
  }
  
  .khan-book-header {
    padding: 15px;
    background-color: #f5f5f5;
    border-bottom: 1px solid #eeeeee;
  }
  
  .khan-book-title {
    font-size: 1.1rem;
    font-weight: 600;
    margin: 0;
    color: #1a1a1a;
  }
  
  .khan-book-content {
    padding: 15px;
    flex-grow: 1;
    display: flex;
    flex-direction: column;
  }
  
  .khan-book-description {
    color: #666;
    margin-bottom: 15px;
    font-size: 0.9rem;
  }
  
  .khan-book-footer {
    padding: 15px;
    border-top: 1px solid #eeeeee;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }
  
  .khan-volume-tag {
    background-color: #e8f2ff;
    color: #1865f2;
    padding: 4px 8px;
    border-radius: 4px;
    font-size: 0.85rem;
    font-weight: 500;
  }
  
  .khan-volumes-container {
    display: flex;
    flex-wrap: wrap;
    gap: 8px;
    margin-top: 10px;
    margin-bottom: auto;
  }
  
  .khan-volume-btn {
    display: inline-block;
    padding: 8px 15px;
    background-color: #e8f2ff;
    color: #1865f2;
    border-radius: 4px;
    text-decoration: none;
    font-weight: 500;
    font-size: 0.9rem;
    transition: background-color 0.2s;
  }
  
  .khan-volume-btn:hover {
    background-color: #1865f2;
    color: white;
  }
  
  .khan-badge {
    display: inline-block;
    padding: 4px 8px;
    border-radius: 50px;
    font-size: 0.8rem;
    font-weight: 600;
    margin-left: 5px;
    background-color: #f0f0f0;
    color: #555;
  }
  
  .khan-icon {
    display: inline-flex;
    justify-content: center;
    align-items: center;
    width: 36px;
    height: 36px;
    border-radius: 50%;
    margin-right: 12px;
    background-color: rgba(255, 255, 255, 0.2);
  }
  
  .khan-icon i {
    font-size: 1.2rem;
  }

  .small-heading {
    font-size: 0.85rem;
    color: #888;
    margin-bottom: 5px;
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }
  
  /* 반응형 디자인 */
  @media (max-width: 768px) {
    .khan-book-grid {
      grid-template-columns: 1fr;
    }
  }
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
  // 메인 컨테이너 요소 확인
  const categoryContainer = document.getElementById('categoryContainer');
  if (!categoryContainer) {
    console.error('categoryContainer 요소를 찾을 수 없습니다.');
    return; // 컨테이너가 없으면 실행 중단
  }
  
  // 카테고리 이름 매핑 (영문 -> 한글)
  const categoryMapping = {
    'preschool_lv1': '프리스쿨 LV1',
    'preschool_lv2': '프리스쿨 LV2',
    'preschool_lv3': '프리스쿨 LV3',
    'junior_lv1': '주니어 LV1',
    'junior_lv2': '주니어 LV2',
    'cps': 'CPS',
    'cpa': 'CPA',
    'appinventor': '앱인벤터',
    'python': '파이썬'
  };
  
  // 카테고리 그룹화 설정
  const categoryGroups = {
    'preschool': {
      title: '프리스쿨',
      description: '유아 코딩 교육 (5-7세)',
      icon: 'book',
      iconColor: '#3b82f6',
      categories: ['preschool_lv1', 'preschool_lv2', 'preschool_lv3']
    },
    'junior': {
      title: '주니어',
      description: '초등학생 코딩 교육 (8-12세)',
      icon: 'journal-code',
      iconColor: '#8b5cf6',
      categories: ['junior_lv1', 'junior_lv2']
    },
    'epl': {
      title: 'EPL 프로젝트',
      description: '교육용 프로그래밍 언어',
      icon: 'code-square',
      iconColor: '#ec4899',
      categories: ['cps', 'cpa']
    },
    'advanced': {
      title: '고급 프로그래밍',
      description: '실전 프로그래밍 언어',
      icon: 'laptop-code',
      iconColor: '#10b981',
      categories: ['appinventor', 'python']
    }
  };
  
  // 교재별 설명 추가
  const bookDescriptions = {
    'preschool_lv1': '기초 코딩 개념 이해하기',
    'preschool_lv2': '논리적 사고력 발달',
    'preschool_lv3': '창의적 문제 해결력',
    'junior_lv1': '기본 알고리즘 이해하기',
    'junior_lv2': '프로그래밍 심화',
    'cps': '스크래치 프로그래밍',
    'cpa': '앱 인벤터 기초',
    'appinventor': '모바일 앱 개발',
    'python': '텍스트 기반 프로그래밍'
  };
  
  // 교재 목록 가져오기
  fetch('/report/books')
    .then(response => {
      if (!response.ok) {
        throw new Error('교재 목록을 불러오는데 실패했습니다.');
      }
      return response.json();
    })
    .then(data => {
      console.log('받아온 교재 데이터:', data);
      
      // 컨테이너 초기화
      categoryContainer.innerHTML = '';
      
      // 데이터가 없는 경우
      if (!data || Object.keys(data).length === 0) {
        categoryContainer.innerHTML = `
          <div class="alert alert-warning">
            <i class="bi bi-exclamation-triangle me-2"></i>
            사용 가능한 교재 정보가 없습니다.
          </div>
        `;
        return;
      }
      
      // 그룹별로 카테고리 렌더링
      Object.keys(categoryGroups).forEach(groupKey => {
        const group = categoryGroups[groupKey];
        let hasContent = false;
        
        // 해당 그룹에 속한 카테고리가 데이터에 있는지 확인
        group.categories.forEach(category => {
          if (data[category] && data[category].length > 0) {
            hasContent = true;
          }
        });
        
        // 콘텐츠가 없으면 이 그룹은 표시하지 않음
        if (!hasContent) return;
        
        // 그룹 섹션 컨테이너 생성
        const groupSection = document.createElement('div');
        groupSection.className = 'khan-category';
        
        // 그룹 헤더 생성
        const groupHeader = document.createElement('div');
        groupHeader.className = 'khan-category-header';
        groupHeader.innerHTML = `
          <div class="khan-icon">
            <i class="bi bi-${group.icon}"></i>
          </div>
          <h2 class="khan-category-title">${group.title}</h2>
        `;
        
        // 교재 그리드 컨테이너 생성
        const booksContainer = document.createElement('div');
        booksContainer.className = 'khan-category-container';
        
        const booksGrid = document.createElement('div');
        booksGrid.className = 'khan-book-grid';
        
        // 그룹 내 카테고리별 교재 추가
        group.categories.forEach(category => {
          if (data[category] && data[category].length > 0) {
            // 정렬된 교재 목록 (볼륨 숫자 기준)
            const sortedVolumes = [...data[category]].sort((a, b) => {
              return parseInt(a.volume) - parseInt(b.volume);
            });
            
            // 교재 카드 생성
            const bookCard = document.createElement('div');
            bookCard.className = 'khan-book-card';
            
            // 교재 헤더
            const bookHeader = document.createElement('div');
            bookHeader.className = 'khan-book-header';
            bookHeader.innerHTML = `
              <h3 class="khan-book-title">${categoryMapping[category] || category}</h3>
            `;
            
            // 교재 콘텐츠
            const bookContent = document.createElement('div');
            bookContent.className = 'khan-book-content';
            
            // 교재 설명
            const bookDescription = document.createElement('p');
            bookDescription.className = 'khan-book-description';
            bookDescription.textContent = bookDescriptions[category] || '교재 설명';
            
            // 볼륨 선택 섹션
            const volumesSection = document.createElement('div');
            volumesSection.className = 'khan-volumes-section';
            
            const volumesHeading = document.createElement('div');
            volumesHeading.className = 'small-heading';
            volumesHeading.textContent = '호수 선택';
            
            const volumesContainer = document.createElement('div');
            volumesContainer.className = 'khan-volumes-container';
            
            // 각 호수 버튼 생성
            sortedVolumes.forEach(book => {
              if (!book.volume) return; // 볼륨 정보가 없는 경우 스킵
              
              const volumeBtn = document.createElement('a');
              volumeBtn.href = `/report/generate/${encodeURIComponent(category)}/${encodeURIComponent(book.volume)}`;
              volumeBtn.className = 'khan-volume-btn';
              volumeBtn.textContent = `${book.volume}호`;
              
              volumesContainer.appendChild(volumeBtn);
            });
            
            // 교재 푸터
            const bookFooter = document.createElement('div');
            bookFooter.className = 'khan-book-footer';
            bookFooter.innerHTML = `
              <span class="khan-volume-tag">${sortedVolumes.length} 호수</span>
              <span class="khan-badge">교재 학습</span>
            `;
            
            // 요소 결합
            volumesSection.appendChild(volumesHeading);
            volumesSection.appendChild(volumesContainer);
            
            bookContent.appendChild(bookDescription);
            bookContent.appendChild(volumesSection);
            
            bookCard.appendChild(bookHeader);
            bookCard.appendChild(bookContent);
            bookCard.appendChild(bookFooter);
            
            booksGrid.appendChild(bookCard);
          }
        });
        
        // 그룹 섹션에 헤더와 콘텐츠 추가
        booksContainer.appendChild(booksGrid);
        groupSection.appendChild(groupHeader);
        groupSection.appendChild(booksContainer);
        
        // 메인 컨테이너에 그룹 섹션 추가
        categoryContainer.appendChild(groupSection);
      });
    })
    .catch(error => {
      console.error('Error:', error);
      categoryContainer.innerHTML = `
        <div class="alert alert-danger">
          <i class="bi bi-exclamation-circle me-2"></i>
          교재 정보를 불러오는 중 오류가 발생했습니다: ${error.message}
        </div>
      `;
    });
});
</script>
<script src="/js/report_bookslist.js"></script>