<!-- CSS 파일 참조 추가 -->
<link rel="stylesheet" href="/css/report.css">
<%- include('../partials/header') %>

<div class="container my-4">
  <div class="row mb-3">
    <div class="col-md-6">
      <h2>월간 학습리포트 POD</h2>
      <p class="text-muted" id="reportTitle">...</p>
    </div>
    <div class="col-md-6 text-md-end">
      <a href="/report/books-page" class="btn btn-outline-secondary me-2">
        <i class="bi bi-arrow-left"></i> 목록으로
      </a>
      <button id="saveReportBtn" class="btn btn-success me-2">
        <i class="bi bi-save"></i> 임시저장
      </button>
      <button id="printBtn" class="btn btn-primary">
        <i class="bi bi-printer"></i> 인쇄하기
      </button>
    </div>
  </div>

  <div class="alert alert-success d-none" id="saveAlert">
    <i class="bi bi-check-circle me-2"></i> 리포트가 성공적으로 저장되었습니다!
  </div>

  <div class="row">
    <div class="col-12">
      <div class="card shadow-sm" id="reportPreview">
        <div class="card-header bg-light d-flex justify-content-between align-items-center">
          <h5 class="mb-0">리포트 편집</h5>
          <small class="text-muted">빈칸을 클릭하여 직접 입력하세요</small>
        </div>
        <div class="card-body">
          <div id="loading" class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
              <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-2">교재 정보를 불러오는 중...</p>
          </div>
          
          <div id="reportContent" class="d-none">
            <!-- 리포트 컨텐츠 시작 -->
            <div id="printableReport" class="a4-page">
              <div class="text-center mb-4">
                <h1 class="display-6 fw-bold">Monthly Assessment</h1>
                <div class="text-end">
                  <h6>센터: <span id="headerCenterName" class="editable" data-field="centerName" contenteditable="true">(센터명 입력)</span></h6>
                </div>
              </div>
              
              <table class="table table-bordered fixed-width">
                <tr>
                  <th style="width: 15%;" class="text-center bg-light">학습 기간</th>
                  <td style="width: 35%;" id="studyPeriodCell" class="d-flex">
                    <input type="date" id="startDate" class="form-control form-control-sm me-1" style="width: 45%;">
                    <span class="align-self-center mx-1">~</span>
                    <input type="date" id="endDate" class="form-control form-control-sm" style="width: 45%;">
                  </td>
                  <th style="width: 15%;" class="text-center bg-light">프로그램명</th>
                  <td style="width: 35%;" id="programNameCell"></td>
                </tr>
                <tr>
                  <th class="text-center bg-light">학 생 명</th>
                  <td id="studentNameCell" class="editable" data-field="studentName" contenteditable="true">(학생명 입력)</td>
                  <th class="text-center bg-light">강 사 명</th>
                  <td id="teacherNameCell" class="editable" data-field="teacherName" contenteditable="true">(강사명 입력)</td>
                </tr>
              </table>
              
              <!-- 교재 정보 - 순서 변경됨 -->
              <div class="mt-4 mb-4">
                <h5 class="mb-3 text-center" id="contentsTitle"></h5>
                
                <table class="table table-bordered fixed-width">
                  <tr>
                    <th class="text-center bg-light" style="width: 15%;">교재</th>
                    <td id="bookThumbnailsCell" class="text-center">
                      <!-- 썸네일 이미지가 여기에 삽입됩니다 -->
                    </td>
                  </tr>
                </table>
              </div>
              
              <!-- 선생님 의견 - 순서 변경됨 -->
              <div class="mt-4">
                <h5 class="mb-3">선생님 의견</h5>
                <div class="teacher-comment-area mb-4 editable" id="teacherCommentCell" data-field="teacherComment" contenteditable="true">
                  학생의 성취와 발전 사항, 개선이 필요한 부분, 향후 학습 방향에 대해 의견을 작성하세요.
                </div>
              </div>
              
              <!-- CT 요소 평가 테이블 - 순서 변경됨 -->
              <div class="evaluation-container">
                <table class="table table-bordered mt-4 fixed-width">
                  <colgroup>
                    <col style="width: 5%;">
                    <col style="width: 20%;">
                    <col style="width: 55%;">
                    <col style="width: 6%;">
                    <col style="width: 7%;">
                    <col style="width: 7%;">
                  </colgroup>
                  <thead>
                    <tr>
                      <th class="text-center bg-light">항목</th>
                      <th class="text-center bg-light">
                        CT<br>
                        <small>(컴퓨팅 사고력)</small>
                      </th>
                      <th class="text-center bg-light">평가 내용</th>
                      <th class="text-center bg-light">상</th>
                      <th class="text-center bg-light">중</th>
                      <th class="text-center bg-light">하</th>
                    </tr>
                  </thead>
                  <tbody id="evaluationTableBody">
                    <!-- 평가 항목이 여기에 동적으로 삽입됩니다 -->
                  </tbody>
                </table>
              </div>
              
              <div class="text-center mt-4 page-footer">
                <img src="/resource/codingnplay_logo.png" alt="코딩앤플레이" style="max-width: 80px;" />
              </div>
            </div>
            <!-- 리포트 컨텐츠 끝 -->
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
<%- include('../partials/footer') %>

<style>
  /* A4 용지 크기에 맞는 스타일 */
  @media screen {
    .a4-page {
      width: 100%;
      max-width: 100%;
      margin: 0 auto;
      background: white;
      padding: 20px;
      box-sizing: border-box;
    }
    
    .fixed-width {
      width: 100% !important;
      table-layout: fixed;
    }
    
    /* 스크롤 제거 */
    .evaluation-container {
      width: 100%;
      overflow-x: visible;
    }
  }
  
  /* 편집 가능한 요소 스타일 */
  .editable {
    min-height: 20px;
    border: 1px dashed transparent;
    padding: 2px 5px;
    transition: all 0.2s;
  }
  
  .editable:hover, .editable:focus {
    border-color: #80bdff;
    background-color: #f8f9fa;
    outline: none;
  }
  
  .editable:empty:before {
    content: attr(data-placeholder);
    color: #aaa;
    font-style: italic;
  }
  
  /* 인쇄 시 적용되는 스타일 */
  @media print {
    @page {
      size: A4 portrait;
      margin: 0.5cm;
    }
    
    /* 인쇄 시 요소 숨김 방식 변경 */
    body > *:not(#printableReport) {
      display: none !important;
    }
    
    #printableReport {
      display: block !important;
      visibility: visible !important;
      width: 21cm;
      min-height: 29.7cm;
      position: absolute;
      top: 0;
      left: 0;
      margin: 0;
      padding: 1cm;
      box-sizing: border-box;
      page-break-after: always;
      background: white;
    }
    
    #printableReport * {
      visibility: visible !important;
    }
    
    .fixed-width {
      width: 100% !important;
      table-layout: fixed;
    }
    
    /* 편집 가능 요소 인쇄 스타일 */
    .editable {
      border: none !important;
    }
    
    /* 날짜 입력 필드 인쇄 스타일 */
    #studyPeriodCell input {
      border: none;
      background: transparent;
    }
    
    #studyPeriodCell:before {
      content: attr(data-formatted-period);
    }
    
    #studyPeriodCell input, #studyPeriodCell .align-self-center {
      display: none !important;
    }
    
    /* 내용이 많아질 경우 자동으로 페이지 나누기 */
    .evaluation-container {
      page-break-inside: auto;
      overflow: visible !important;
    }
    
    tr {
      page-break-inside: avoid;
    }
    
    .page-footer {
      position: fixed;
      bottom: 0.5cm;
      left: 0;
      right: 0;
      text-align: center;
    }
    
    /* 다음 요소들은 명시적으로 숨김 */
    header, footer, 
    .navbar, .btn, 
    .card-header,
    .container > .row:first-child,
    #saveAlert {
      display: none !important;
    }
  }
  
  /* 테이블 열 너비 고정 */
  th, td {
    word-wrap: break-word;
    overflow-wrap: break-word;
  }
  
  /* 선생님 의견 영역 스타일 */
  .teacher-comment-area {
    border: 1px solid #dee2e6;
    border-radius: 4px;
    padding: 1rem;
    min-height: 100px;
  }
  
  /* 도서 썸네일 이미지 스타일 */
  .book-thumbnail {
    max-height: 150px;
    max-width: 100%;
    object-fit: contain;
  }
  
  /* 저장 알림 스타일 */
  #saveAlert {
    position: fixed;
    top: 20px;
    right: 20px;
    z-index: 1050;
    width: 300px;
    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
    animation: fadeOut 3s forwards;
    animation-delay: 3s;
  }
  
  @keyframes fadeOut {
    0% { opacity: 1; }
    100% { opacity: 0; visibility: hidden; }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', async function() {
    // URL에서 카테고리와 볼륨 값 가져오기
    const pathParts = window.location.pathname.split('/');
    const category = decodeURIComponent(pathParts[pathParts.length - 2]);
    const volume = decodeURIComponent(pathParts[pathParts.length - 1]);
    
    // 초기 로딩 상태
    const loadingElement = document.getElementById('loading');
    const reportContentElement = document.getElementById('reportContent');
    const saveAlertElement = document.getElementById('saveAlert');
    
    // 리포트 요소
    const reportTitleElement = document.getElementById('reportTitle');
    const studentNameCell = document.getElementById('studentNameCell');
    const teacherNameCell = document.getElementById('teacherNameCell');
    const headerCenterName = document.getElementById('headerCenterName');
    const startDateInput = document.getElementById('startDate');
    const endDateInput = document.getElementById('endDate');
    const studyPeriodCell = document.getElementById('studyPeriodCell');
    const programNameCell = document.getElementById('programNameCell');
    const teacherCommentCell = document.getElementById('teacherCommentCell');
    const evaluationTableBody = document.getElementById('evaluationTableBody');
    const contentsTitle = document.getElementById('contentsTitle');
    const bookThumbnailsCell = document.getElementById('bookThumbnailsCell');
    
    // 날짜 기본값 설정 (오늘 및 1개월 전)
    const today = new Date();
    const oneMonthAgo = new Date();
    oneMonthAgo.setMonth(today.getMonth() - 1);
    
    startDateInput.value = formatDateForInput(oneMonthAgo);
    endDateInput.value = formatDateForInput(today);
    
    // 날짜 변경 시 기간 포맷팅
    function updateFormattedPeriod() {
      if (startDateInput.value && endDateInput.value) {
        const formattedPeriod = formatDateRange(startDateInput.value, endDateInput.value);
        studyPeriodCell.setAttribute('data-formatted-period', formattedPeriod);
      }
    }
    
    startDateInput.addEventListener('change', updateFormattedPeriod);
    endDateInput.addEventListener('change', updateFormattedPeriod);
    
    // 초기 포맷팅 실행
    updateFormattedPeriod();
    
    // 카테고리 이름 매핑 (영문 -> 한글)
    const categoryMapping = {
      'preschool': '프리스쿨',
      'junior': '주니어',
      'cps': 'CPS',
      'cpa': 'CPA',
      'ctr_appinventor': 'CTR앱인벤터',
      'ctr_python': 'CTR파이썬'
    };
    
    // 보고서 저장 키 생성 (볼륨 형식 통일)
    let normalizedVolume = volume;
    // 프리스쿨/주니어의 경우 LV 정보와 호수 정보를 정규화하여 저장 키로 사용
    if (category === 'preschool' || category === 'junior') {
      const levelMatch = volume.match(/LV(\d+)/i);
      const volumeMatch = volume.match(/[-_](\d+)호$/);
      if (levelMatch && volumeMatch) {
        normalizedVolume = `LV${levelMatch[1]}-${volumeMatch[1]}호`;
      }
    }
    const reportStorageKey = `report_${category}_${normalizedVolume}`;
    
    // 저장된 데이터 불러오기
    loadSavedReportData();
    
    try {
      // 교재 정보 가져오기
      const response = await fetch(`/report/book/${category}/${volume}`);
      
      if (!response.ok) {
        throw new Error('교재 정보를 불러오는데 실패했습니다.');
      }
      
      const data = await response.json();
      
      // 레벨 포함 여부에 따른 표시 조정
      const displayCategory = categoryMapping[category] || category;
      let levelInfo = '';
      
      // 프리스쿨과 주니어 과정의 경우 레벨 정보 추출
      if (category === 'preschool' || category === 'junior') {
        // 볼륨에서 레벨 정보 추출 (예: 'LV1-3'에서 'LV1' 추출)
        const levelMatch = volume.match(/LV(\d+)/i);
        if (levelMatch) {
          levelInfo = ` LV${levelMatch[1]}`;
        }
      }
      
      // 실제 호수 부분 추출 (LV 정보 제외)
      let volumeNumber = volume;
      if (category === 'preschool' || category === 'junior') {
        const volumeMatch = volume.match(/[-_](\d+)호$/);
        if (volumeMatch) {
          volumeNumber = volumeMatch[1] + '호';
        }
      } else if (!volume.endsWith('호')) {
        volumeNumber = volume + '호';
      }
      
      // 리포트 제목 설정
      reportTitleElement.textContent = `${displayCategory}${levelInfo} ${volumeNumber}`;
      
      // 프로그램 이름 설정
      programNameCell.textContent = `${displayCategory}${levelInfo}`;
      
      // 컨텐츠 타이틀 설정
      contentsTitle.textContent = `${displayCategory}${levelInfo} CT컴퓨팅 사고력 신규확장 콘텐츠`;
      
      // 썸네일 이미지 표시
      if (data.book.thumbnail) {
        bookThumbnailsCell.innerHTML = `
          <img src="${data.book.thumbnail}" alt="${data.book.title}" class="book-thumbnail">
          <p class="small mt-2">${data.book.title}</p>
        `;
      } else {
        bookThumbnailsCell.innerHTML = `
          <p class="text-muted small">이미지 없음</p>
          <p class="small mt-2">${data.book.title}</p>
        `;
      }
      
      // 호수에 해당하는 평가 항목만 필터링
      let filteredEvaluationItems = data.evaluationItems;
      
      // 레벨이 있는 교재(프리스쿨, 주니어)의 경우 볼륨에 맞는 CT 요소만 필터링
      if ((category === 'preschool' || category === 'junior') && data.evaluationItems) {
        // 볼륨에서 숫자만 추출 (예: 'LV1-3호'에서 '3' 추출)
        const volumeNumMatch = volume.match(/[-_](\d+)호$/);
        const volumeNum = volumeNumMatch ? parseInt(volumeNumMatch[1]) : null;
        
        if (volumeNum !== null) {
          // 각 항목에 volume 정보가 있는 경우 (예: item.volume = "3" 또는 item.volumeNumber = "3")
          filteredEvaluationItems = data.evaluationItems.filter(item => {
            // 여러 가능한 속성 이름을 검사 (백엔드 구현에 따라 다를 수 있음)
            const itemVolume = item.volume || item.volumeNumber || item.volumeNum || item.호수;
            return itemVolume == volumeNum || itemVolume == volumeNum.toString();
          });
          
          console.log(`${volumeNum}호에 해당하는 평가 항목 ${filteredEvaluationItems.length}개 필터링됨`);
        }
      }
      
      // 평가 항목 테이블 생성
      if (filteredEvaluationItems && filteredEvaluationItems.length > 0) {
        evaluationTableBody.innerHTML = '';
        
        filteredEvaluationItems.forEach((item, index) => {
          const row = document.createElement('tr');
          row.innerHTML = `
            <td class="text-center">${item.id || index + 1}</td>
            <td class="text-center">${item.principle || ''}</td>
            <td>${item.description || ''}</td>
            <td class="text-center">
              <div class="form-check form-check-inline justify-content-center">
                <input class="form-check-input evaluation-radio" type="radio" 
                  name="evaluation-${index}" id="eval-${index}-high" value="상" checked>
              </div>
            </td>
            <td class="text-center">
              <div class="form-check form-check-inline justify-content-center">
                <input class="form-check-input evaluation-radio" type="radio" 
                  name="evaluation-${index}" id="eval-${index}-mid" value="중">
              </div>
            </td>
            <td class="text-center">
              <div class="form-check form-check-inline justify-content-center">
                <input class="form-check-input evaluation-radio" type="radio" 
                  name="evaluation-${index}" id="eval-${index}-low" value="하">
              </div>
            </td>
          `;
          evaluationTableBody.appendChild(row);
        });
        
        // 평가 항목이 불러와졌음을 보여주는 로그
        console.log(`${filteredEvaluationItems.length}개의 평가 항목이 표시됨`);
        
        // 평가 항목이 많을 경우 페이지 나누기를 위한 처리
        handlePageBreaks(filteredEvaluationItems.length);
        
        // 저장된 평가 데이터 복원
        restoreEvaluationData();
      } else {
        evaluationTableBody.innerHTML = `
          <tr>
            <td colspan="6" class="text-center text-muted py-3">
              ${category === 'preschool' || category === 'junior' ? 
                '해당 호수에 맞는 평가 항목이 없습니다.' : 
                '평가 항목이 없습니다.'}
            </td>
          </tr>
        `;
        console.log('표시할 평가 항목이 없음');
      }
      
      // 로딩 완료 후 컨텐츠 표시
      loadingElement.classList.add('d-none');
      reportContentElement.classList.remove('d-none');
      
      // 자동 저장 설정
      setupAutoSave();
      
    } catch (error) {
      console.error('Error:', error);
      loadingElement.innerHTML = `
        <div class="alert alert-danger">
          <i class="bi bi-exclamation-circle me-2"></i>
          교재 정보를 불러오는 중 오류가 발생했습니다: ${error.message}
        </div>
      `;
    }
    
    // 저장된 리포트 데이터 불러오기
    function loadSavedReportData() {
      try {
        const savedData = localStorage.getItem(reportStorageKey);
        if (savedData) {
          const data = JSON.parse(savedData);
          
          // 데이터 복원
          if (data.centerName) headerCenterName.innerText = data.centerName;
          if (data.studentName) studentNameCell.innerText = data.studentName;
          if (data.teacherName) teacherNameCell.innerText = data.teacherName;
          if (data.teacherComment) teacherCommentCell.innerText = data.teacherComment;
          if (data.startDate) startDateInput.value = data.startDate;
          if (data.endDate) endDateInput.value = data.endDate;
          
          console.log('저장된 리포트 데이터를 불러왔습니다.');
        }
      } catch (error) {
        console.error('저장된 데이터 불러오기 오류:', error);
      }
    }
    
    // 저장된 평가 데이터 복원
    function restoreEvaluationData() {
      try {
        const savedData = localStorage.getItem(reportStorageKey);
        if (savedData) {
          const data = JSON.parse(savedData);
          
          if (data.evaluations) {
            data.evaluations.forEach((value, index) => {
              const radioSelector = `input[name="evaluation-${index}"][value="${value}"]`;
              const radio = document.querySelector(radioSelector);
              if (radio) radio.checked = true;
            });
          }
        }
      } catch (error) {
        console.error('평가 데이터 복원 오류:', error);
      }
    }
    
    // 자동 저장 설정
    function setupAutoSave() {
      // 편집 가능 요소에 이벤트 리스너 추가
      document.querySelectorAll('.editable').forEach(el => {
        el.addEventListener('blur', saveReportData);
      });
      
      // 날짜 입력 필드에 이벤트 리스너 추가
      startDateInput.addEventListener('change', saveReportData);
      endDateInput.addEventListener('change', saveReportData);
      
      // 라디오 버튼 변경 이벤트 리스너 추가
      document.querySelectorAll('.evaluation-radio').forEach(radio => {
        radio.addEventListener('change', saveReportData);
      });
      
      // 저장 버튼 클릭 이벤트
      document.getElementById('saveReportBtn').addEventListener('click', function() {
        saveReportData();
        showSaveAlert();
      });
    }
    
    // 리포트 데이터 저장 함수
    function saveReportData() {
      const reportData = {
        centerName: headerCenterName.innerText,
        studentName: studentNameCell.innerText,
        teacherName: teacherNameCell.innerText,
        teacherComment: teacherCommentCell.innerText,
        startDate: startDateInput.value,
        endDate: endDateInput.value,
        evaluations: []
      };
      
      // 평가 항목 값 수집
      document.querySelectorAll('[name^="evaluation-"]').forEach((input, groupIndex) => {
        if (input.checked) {
          const groupName = input.name;
          const index = parseInt(groupName.split('-')[1]);
          reportData.evaluations[index] = input.value;
        }
      });
      
      // 로컬 스토리지에 저장
      localStorage.setItem(reportStorageKey, JSON.stringify(reportData));
      console.log('리포트 데이터가 자동 저장되었습니다.');
    }
    
    // 저장 알림 표시
    function showSaveAlert() {
      saveAlertElement.classList.remove('d-none');
      
      // 6초 후 알림 숨기기
      setTimeout(() => {
        saveAlertElement.classList.add('d-none');
      }, 6000);
    }
    
    // 평가 항목 수에 따른 페이지 나누기 처리
    function handlePageBreaks(itemCount) {
      // 항목이 많을 경우(예: 7개 이상) 자동으로 페이지 나누기 설정
      if (itemCount > 7) {
        console.log('평가 항목이 많아 페이지 나누기 처리가 필요합니다.');
        // 클래스 추가로 인쇄 시 페이지 나누기 힌트 제공
        document.querySelector('.evaluation-container').classList.add('multi-page');
      }
    }
    
    // 인쇄 버튼 이벤트
    const printBtn = document.getElementById('printBtn');
    if (printBtn) {
      printBtn.addEventListener('click', function() {
        // 인쇄 전 레이아웃 최적화
        optimizeForPrinting();
        
        // 인쇄 가능한 상태로 보고서 복제
        const printContent = document.getElementById('printableReport');
        const printWindow = window.open('', '_blank');
        
        if (printWindow) {
          printWindow.document.write(`
            <!DOCTYPE html>
            <html>
            <head>
              <title>학습 리포트</title>
              <style>
                @page {
                  size: A4 portrait;
                  margin: 1cm;
                }
                body {
                  font-family: 'Noto Sans KR', sans-serif;
                  line-height: 1.5;
                  margin: 0;
                  padding: 0;
                }
                .a4-page {
                  width: 21cm;
                  min-height: 29.7cm;
                  padding: 1cm;
                  margin: 0 auto;
                  background: white;
                  box-sizing: border-box;
                }
                table {
                  width: 100%;
                  border-collapse: collapse;
                  table-layout: fixed;
                }
                th, td {
                  border: 1px solid #dee2e6;
                  padding: 8px;
                  word-wrap: break-word;
                }
                .bg-light {
                  background-color: #f8f9fa;
                }
                .text-center {
                  text-align: center;
                }
                .teacher-comment-area {
                  border: 1px solid #dee2e6;
                  border-radius: 4px;
                  padding: 1rem;
                  min-height: 100px;
                }
                .book-thumbnail {
                  max-height: 150px;
                  max-width: 100%;
                  object-fit: contain;
                }
                .page-footer {
                  margin-top: 20px;
                  text-align: center;
                }
                .editable {
                  border: none;
                }
                #studyPeriodCell:before {
                  content: "${formatDateRange(startDateInput.value, endDateInput.value)}";
                }
                #studyPeriodCell input, #studyPeriodCell .align-self-center {
                  display: none;
                }
              </style>
            </head>
            <body>
              ${printContent.outerHTML}
            </body>
            </html>
          `);
          
          printWindow.document.close();
          // 리소스 로딩이 완료된 후 인쇄 실행
          setTimeout(() => {
            printWindow.print();
            printWindow.close();
          }, 500);
        } else {
          // 팝업 차단된 경우 기존 방식으로 인쇄
          console.warn('팝업이 차단되었습니다. 기존 방식으로 인쇄를 시도합니다.');
          window.print();
        }
      });
    }
    
    // 인쇄를 위한 최적화 함수
    function optimizeForPrinting() {
      // 테이블 너비 확인 및 조정
      const tables = document.querySelectorAll('.fixed-width');
      tables.forEach(table => {
        console.log(`테이블 너비: ${table.offsetWidth}px`);
      });
      
      // 선생님 의견이 비어있는지 확인하고 최소 높이 설정
      const teacherComment = document.getElementById('teacherCommentCell');
      if (teacherComment && (!teacherComment.textContent.trim() || teacherComment.textContent === '학생의 성취와 발전 사항, 개선이 필요한 부분, 향후 학습 방향에 대해 의견을 작성하세요.')) {
        teacherComment.innerHTML = '&nbsp;'; // 비어있을 경우 공백 추가
      }
      
      // 학습 기간 표시를 위한 속성 업데이트
      studyPeriodCell.setAttribute('data-formatted-period', formatDateRange(startDateInput.value, endDateInput.value));
      
      console.log('인쇄를 위한 레이아웃을 최적화했습니다.');
    }
    
    // 날짜 포맷 함수 (YYYY-MM-DD)
    function formatDateForInput(date) {
      return date.toISOString().split('T')[0];
    }
    
    // 날짜 범위 포맷 함수 (YYYY.MM.DD ~ YYYY.MM.DD)
    function formatDateRange(start, end) {
      const formatDate = (dateStr) => {
        const parts = dateStr.split('-');
        return `${parts[0]}.${parts[1]}.${parts[2]}`;
      };
      
      return `${formatDate(start)} ~ ${formatDate(end)}`;
    }
  });


  document.addEventListener('DOMContentLoaded', function() {
    // CT요소를 표시할 컨테이너 확인
    const ctElementsContainer = document.getElementById('ct-elements-container');
    if (!ctElementsContainer) {
      console.warn('CT요소를 표시할 컨테이너가 존재하지 않습니다');
      return;
    }
  
    // 교재 선택 드롭다운 요소 가져오기
    const bookSelector = document.getElementById('book-selector');
    if (bookSelector) {
      // 교재 선택 변경 이벤트 리스너
      bookSelector.addEventListener('change', function() {
        loadCtElementsForSelectedBook(this.value);
      });
      
      // 페이지 로드 시 초기 선택된 교재에 대한 CT요소 로드
      if (bookSelector.value) {
        loadCtElementsForSelectedBook(bookSelector.value);
      }
    }
    
    /**
     * 선택된 교재의 CT요소를 로드하는 함수
     * @param {string} selectedBook - 선택된 교재 (예: "프리스쿨 LV1-프리스쿨1-1")
     */
    function loadCtElementsForSelectedBook(selectedBook) {
      if (!selectedBook) return;
      
      // 교재 정보 파싱
      const bookInfo = parseBookInfo(selectedBook);
      if (!bookInfo) {
        console.error('교재 정보 파싱 실패:', selectedBook);
        return;
      }
      
      const { category, issue } = bookInfo;
      
      // 로딩 표시
      ctElementsContainer.innerHTML = '<p class="text-center"><i class="bi bi-hourglass-split"></i> CT요소 로딩 중...</p>';
      
      // API 호출하여 해당 교재의 CT요소 가져오기
      fetchCtElementsForBook(category, issue);
    }
    
    /**
     * 교재 선택 문자열을 카테고리와 호수로 파싱
     * @param {string} selectedBook - "프리스쿨 LV1-프리스쿨1-1" 형식의 문자열
     * @returns {Object|null} 카테고리와 호수 정보를 포함하는 객체
     */
    function parseBookInfo(selectedBook) {
      // 입력 문자열이 유효한지 확인
      if (!selectedBook || typeof selectedBook !== 'string') {
        return null;
      }
      
      // 파싱 패턴: "카테고리-호수" (예: "프리스쿨 LV1-프리스쿨1-1")
      const parts = selectedBook.split('-');
      
      // 정확하게 파싱되었는지 확인
      if (parts.length < 2) {
        console.error('교재 정보 형식이 올바르지 않습니다:', selectedBook);
        return null;
      }
      
      // 카테고리는 첫 번째 부분
      let category = parts[0].trim();
      
      // 호수는 나머지 부분들을 결합 (경우에 따라 '-'가 호수 내에 포함될 수 있음)
      const issue = parts.slice(1).join('-').trim();
      
      return { category, issue };
    }
    
    /**
     * 특정 교재의 CT요소를 API를 통해 가져오는 함수
     * @param {string} category - 교재 카테고리 (예: "프리스쿨 LV1")
     * @param {string} issue - 교재 호수 (예: "프리스쿨1-1")
     */
    async function fetchCtElementsForBook(category, issue) {
      try {
        const response = await fetch(`/api/get-book-ct-elements/${encodeURIComponent(category)}/${encodeURIComponent(issue)}`);
        
        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.error || '서버 오류');
        }
        
        const ctElements = await response.json();
        
        // CT요소 표시
        displayCtElements(ctElements, category, issue);
        
      } catch (error) {
        console.error('CT요소 로딩 중 오류:', error);
        ctElementsContainer.innerHTML = `
          <div class="alert alert-danger">
            <i class="bi bi-exclamation-triangle-fill"></i> CT요소를 로드하는 중 오류가 발생했습니다: ${error.message}
          </div>
        `;
      }
    }
    
    /**
     * CT요소를 UI에 표시하는 함수
     * @param {Array} ctElements - 표시할 CT요소 목록
     * @param {string} category - 교재 카테고리
     * @param {string} issue - 교재 호수
     */
    function displayCtElements(ctElements, category, issue) {
      if (!ctElementsContainer) return;
      
      ctElementsContainer.innerHTML = '';
      
      // 제목 추가
      const titleElement = document.createElement('h5');
      titleElement.className = 'mb-3';
      titleElement.innerHTML = `<i class="bi bi-list-check"></i> ${category} ${issue} CT요소`;
      ctElementsContainer.appendChild(titleElement);
      
      if (ctElements.length === 0) {
        ctElementsContainer.innerHTML += `
          <div class="alert alert-info">
            <i class="bi bi-info-circle"></i> 해당 교재에 등록된 CT요소가 없습니다.
          </div>
        `;
        return;
      }
      
      // 테이블 생성
      const table = document.createElement('table');
      table.className = 'table table-bordered table-hover';
      
      // 테이블 헤더
      const thead = document.createElement('thead');
      thead.className = 'table-light';
      thead.innerHTML = `
        <tr>
          <th width="10%" class="text-center">차시</th>
          <th width="35%" class="text-center">차시명</th>
          <th width="25%" class="text-center">CT요소</th>
          <th width="30%" class="text-center">평가항목</th>
        </tr>
      `;
      
      // 테이블 바디
      const tbody = document.createElement('tbody');
      
      ctElements.forEach(item => {
        const tr = document.createElement('tr');
        tr.innerHTML = `
          <td class="text-center">${item.차시}</td>
          <td>${item.차시명 || '-'}</td>
          <td>${item.CT요소 || '-'}</td>
          <td>${item.평가항목 || '-'}</td>
        `;
        tbody.appendChild(tr);
      });
      
      table.appendChild(thead);
      table.appendChild(tbody);
      ctElementsContainer.appendChild(table);
      
      // 차시 수 표시
      const countInfo = document.createElement('p');
      countInfo.className = 'text-muted mt-2';
      countInfo.innerHTML = `<small>총 ${ctElements.length}개의 CT요소가 있습니다.</small>`;
      ctElementsContainer.appendChild(countInfo);
    }
  });


  // 추가: CT요소 컨테이너를 동적으로 생성
  const createCtElementsContainer = () => {
    // 이미 존재하는지 확인
    if (document.getElementById('ct-elements-container')) {
      return;
    }
    
    // 리포트 컨텐츠 내에 CT요소 섹션 추가
    const reportContent = document.getElementById('reportContent');
    if (!reportContent) return;
    
    // 평가 컨테이너 찾기
    const evaluationContainer = reportContent.querySelector('.evaluation-container');
    if (!evaluationContainer) return;
    
    // CT요소 컨테이너를 평가 컨테이너 앞에 추가
    const ctContainer = document.createElement('div');
    ctContainer.id = 'ct-elements-container';
    ctContainer.className = 'ct-elements-section mb-4';
    evaluationContainer.parentNode.insertBefore(ctContainer, evaluationContainer);
    
    // CT요소 섹션 제목 추가
    const ctTitle = document.createElement('h5');
    ctTitle.className = 'mb-3';
    ctTitle.innerHTML = 'CT요소 목록';
    ctContainer.appendChild(ctTitle);
    
    return ctContainer;
  };

  // URL에서 교재 정보 파싱
  const parseBookInfoFromURL = () => {
    const pathParts = window.location.pathname.split('/');
    if (pathParts.length < 2) return null;
    
    // report/book/category/volume 경로에서 category와 volume 추출
    const category = decodeURIComponent(pathParts[pathParts.length - 2]);
    const volume = decodeURIComponent(pathParts[pathParts.length - 1]);
    
    // 프리스쿨과 주니어 과정의 경우 레벨 정보 처리
    let bookCategory = category;
    if (category === 'preschool') {
      const levelMatch = volume.match(/LV(\d+)/i);
      if (levelMatch) {
        bookCategory = `프리스쿨 LV${levelMatch[1]}`;
      } else {
        bookCategory = '프리스쿨 LV1'; // 기본값
      }
    } else if (category === 'junior') {
      const levelMatch = volume.match(/LV(\d+)/i);
      if (levelMatch) {
        bookCategory = `주니어 LV${levelMatch[1]}`;
      } else {
        bookCategory = '주니어 LV1'; // 기본값
      }
    }
    
    // 호수 정보 추출
    let bookIssue = '';
    if (category === 'preschool') {
      const issueMatch = volume.match(/LV\d+-(\d+)호/i);
      if (issueMatch) {
        const issueNum = issueMatch[1];
        bookIssue = `프리스쿨${volume.match(/LV(\d+)/i)[1]}-${issueNum}`;
      }
    } else if (category === 'junior') {
      const issueMatch = volume.match(/LV\d+-(\d+)호/i);
      if (issueMatch) {
        const issueNum = issueMatch[1];
        bookIssue = `주니어${volume.match(/LV(\d+)/i)[1]}-${issueNum}`;
      }
    }
    
    return { category: bookCategory, issue: bookIssue };
  };

  // 로딩 완료 후 CT요소 자동 로드 함수
  const loadCtElementsAutomatic = () => {
    // CT요소 컨테이너 생성
    const ctContainer = createCtElementsContainer();
    if (!ctContainer) {
      console.warn('CT요소 컨테이너를 생성할 수 없습니다.');
      return;
    }
    
    // URL에서 교재 정보 파싱
    const bookInfo = parseBookInfoFromURL();
    if (!bookInfo || !bookInfo.category || !bookInfo.issue) {
      console.warn('URL에서 교재 정보를 파싱할 수 없습니다.');
      ctContainer.innerHTML = `
        <div class="alert alert-warning">
          <i class="bi bi-exclamation-circle"></i> 교재 정보를 확인할 수 없습니다.
        </div>
      `;
      return;
    }
    
    console.log('교재 정보 파싱됨:', bookInfo);
    
    // 로딩 표시
    ctContainer.innerHTML = '<p class="text-center"><i class="bi bi-hourglass-split"></i> CT요소 로딩 중...</p>';
    
    // CT요소 API 호출
    fetch(`/api/get-book-ct-elements/${encodeURIComponent(bookInfo.category)}/${encodeURIComponent(bookInfo.issue)}`)
      .then(response => {
        if (!response.ok) {
          throw new Error('API 응답 오류');
        }
        return response.json();
      })
      .then(ctElements => {
        // CT요소 표시
        displayCtElements(ctElements, bookInfo.category, bookInfo.issue, ctContainer);
      })
      .catch(error => {
        console.error('CT요소 로딩 중 오류:', error);
        ctContainer.innerHTML = `
          <div class="alert alert-danger">
            <i class="bi bi-exclamation-triangle-fill"></i> CT요소를 로드하는 중 오류가 발생했습니다: ${error.message}
          </div>
        `;
      });
  };

  // CT요소를 UI에 표시하는 함수
  const displayCtElements = (ctElements, category, issue, container) => {
    if (!container) return;
    
    container.innerHTML = '';
    
    // 제목 추가
    const titleElement = document.createElement('h5');
    titleElement.className = 'mb-3';
    titleElement.innerHTML = `<i class="bi bi-list-check"></i> ${category} ${issue} CT요소`;
    container.appendChild(titleElement);
    
    if (!ctElements || ctElements.length === 0) {
      container.innerHTML += `
        <div class="alert alert-info">
          <i class="bi bi-info-circle"></i> 해당 교재에 등록된 CT요소가 없습니다.
        </div>
      `;
      return;
    }
    
    // 테이블 생성
    const table = document.createElement('table');
    table.className = 'table table-bordered table-hover';
    
    // 테이블 헤더
    const thead = document.createElement('thead');
    thead.className = 'table-light';
    thead.innerHTML = `
      <tr>
        <th width="10%" class="text-center">차시</th>
        <th width="35%" class="text-center">차시명</th>
        <th width="25%" class="text-center">CT요소</th>
        <th width="30%" class="text-center">평가항목</th>
      </tr>
    `;
    
    // 테이블 바디
    const tbody = document.createElement('tbody');
    
    // CT요소를 차시 순으로 정렬
    const sortedElements = [...ctElements].sort((a, b) => parseInt(a.차시 || '0') - parseInt(b.차시 || '0'));
    
    sortedElements.forEach(item => {
      const tr = document.createElement('tr');
      tr.innerHTML = `
        <td class="text-center">${item.차시 || '-'}</td>
        <td>${item.차시명 || '-'}</td>
        <td>${item.CT요소 || '-'}</td>
        <td>${item.평가항목 || '-'}</td>
      `;
      tbody.appendChild(tr);
    });
    
    table.appendChild(thead);
    table.appendChild(tbody);
    container.appendChild(table);
    
    // 차시 수 표시
    const countInfo = document.createElement('p');
    countInfo.className = 'text-muted mt-2';
    countInfo.innerHTML = `<small>총 ${sortedElements.length}개의 CT요소가 있습니다.</small>`;
    container.appendChild(countInfo);
    
    // 인쇄 시 스타일 추가
    const style = document.createElement('style');
    style.textContent = `
      @media print {
        #ct-elements-container {
          page-break-inside: avoid;
        }
        #ct-elements-container table {
          font-size: 11px;
        }
      }
    `;
    document.head.appendChild(style);
  };

  // 리포트 컨텐츠가 로드된 후 CT요소 자동 로드
  document.addEventListener('reportContentLoaded', loadCtElementsAutomatic);

  // 리포트 컨텐츠 로드 완료 이벤트 체크
  const checkReportContentLoaded = () => {
    const reportContent = document.getElementById('reportContent');
    if (reportContent && !reportContent.classList.contains('d-none')) {
      // 이벤트 발생
      document.dispatchEvent(new CustomEvent('reportContentLoaded'));
    }
  };

  // MutationObserver로 reportContent의 클래스 변경 감지
  const observer = new MutationObserver((mutations) => {
    mutations.forEach((mutation) => {
      if (mutation.type === 'attributes' && mutation.attributeName === 'class') {
        checkReportContentLoaded();
      }
    });
  });

  const reportContent = document.getElementById('reportContent');
  if (reportContent) {
    observer.observe(reportContent, { attributes: true });
    
    // 초기 상태 확인 (이미 로드되어 있을 수 있음)
    if (!reportContent.classList.contains('d-none')) {
      setTimeout(loadCtElementsAutomatic, 500);
    }
  };

</script>