<%- include('../partials/header') %>

<div class="container my-4">
  <div class="row mb-3">
    <div class="col-md-6">
      <h2>월간 학습리포트 POD</h2>
      <p class="text-muted" id="reportTitle">...</p>
    </div>
    <div class="col-md-6 text-md-end">
      <button id="saveBtn" class="btn btn-outline-primary me-2">
        <i class="bi bi-save"></i> 임시저장
      </button>
      <a href="/report/books-page" class="btn btn-outline-secondary me-2">
        <i class="bi bi-arrow-left"></i> 목록으로
      </a>
      <button id="printBtn" class="btn btn-primary">
        <i class="bi bi-printer"></i> 인쇄하기
      </button>
    </div>
  </div>

  <div class="card shadow-sm" id="reportPreview">
    <div class="card-header bg-light">
      <h5 class="mb-0">리포트</h5>
    </div>
    <div class="card-body">
      <div id="loading" class="text-center py-5">
        <div class="spinner-border text-primary" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
        <p class="mt-2">교재 정보를 불러오는 중...</p>
      </div>
      
      <div id="reportContent" class="d-none">
        <!-- 리포트 컨텐츠 시작 -->
        <div id="printableReport" class="a4-page">
          <div class="text-center mb-4">
            <h1 class="display-6 fw-bold">Monthly Assessment</h1>
            <div class="text-end">
              <h6>센터: <span id="headerCenterName" class="editable" contenteditable="true" data-storage-key="centerName" data-placeholder="센터명 입력"></span></h6>
            </div>
          </div>
          
          <table class="table table-bordered fixed-width">
            <tr>
              <th style="width: 15%;" class="text-center bg-light">학습 기간</th>
              <td style="width: 35%;" id="studyPeriodCell">
                <div class="d-flex align-items-center">
                  <input type="date" id="startDate" class="form-control form-control-sm date-input" data-storage-key="startDate">
                  <span class="mx-1">~</span>
                  <input type="date" id="endDate" class="form-control form-control-sm date-input" data-storage-key="endDate">
                </div>
              </td>
              <th style="width: 15%;" class="text-center bg-light">프로그램명</th>
              <td style="width: 35%;" id="programNameCell"></td>
            </tr>
            <tr>
              <th class="text-center bg-light">학 생 명</th>
              <td id="studentNameCell" class="editable" contenteditable="true" data-storage-key="studentName" data-placeholder="학생 이름 입력"></td>
              <th class="text-center bg-light">강 사 명</th>
              <td id="teacherNameCell" class="editable" contenteditable="true" data-storage-key="teacherName" data-placeholder="강사 이름 입력"></td>
            </tr>
          </table>

          <!-- 1. 교재 정보 (순서 변경) -->
          <div class="mt-4 mb-4">
            <h5 class="mb-3 text-center" id="contentsTitle"></h5>
            
            <table class="table table-bordered fixed-width">
              <tr>
                <th class="text-center bg-light" style="width: 15%;">교재</th>
                <td id="bookThumbnailsCell" class="text-center">
                  <!-- 썸네일 이미지가 여기에 삽입됩니다 -->
                </td>
              </tr>
            </table>
          </div>
          
          <!-- 2. 선생님 의견 (순서 변경) -->
          <div class="mt-4">
            <h5 class="mb-3">선생님 의견</h5>
            <div class="teacher-comment-area mb-4 editable" id="teacherCommentCell" contenteditable="true" data-storage-key="teacherComment" data-placeholder="이 학생의 학습 성과와 발전 방향에 대한 의견을 작성해주세요."></div>
          </div>
          
          <!-- 3. CT요소 테이블 (순서 변경) -->
          <div class="evaluation-container">
            <table class="table table-bordered mt-4 fixed-width">
              <colgroup>
                <col style="width: 5%;">
                <col style="width: 20%;">
                <col style="width: 55%;">
                <col style="width: 6%;">
                <col style="width: 7%;">
                <col style="width: 7%;">
              </colgroup>
              <thead>
                <tr>
                  <th class="text-center bg-light">항목</th>
                  <th class="text-center bg-light">
                    CT<br>
                    <small>(컴퓨팅 사고력)</small>
                  </th>
                  <th class="text-center bg-light">평가 내용</th>
                  <th class="text-center bg-light">상</th>
                  <th class="text-center bg-light">중</th>
                  <th class="text-center bg-light">하</th>
                </tr>
              </thead>
              <tbody id="evaluationTableBody">
                <!-- 평가 항목이 여기에 동적으로 삽입됩니다 -->
              </tbody>
            </table>
          </div>
          
          <div class="text-center mt-4 page-footer">
            <img src="/resource/codingnplay_logo.png" alt="코딩앤플레이" style="max-width: 80px;" />
          </div>
        </div>
        <!-- 리포트 컨텐츠 끝 -->
      </div>
    </div>
  </div>

  <!-- 알림 메시지 영역 -->
  <div id="notification" class="toast-container position-fixed bottom-0 end-0 p-3" style="z-index: 5">
    <div class="toast align-items-center text-white bg-success border-0" role="alert" aria-live="assertive" aria-atomic="true">
      <div class="d-flex">
        <div class="toast-body">
          <i class="bi bi-check-circle me-2"></i> <span id="toastMessage"></span>
        </div>
        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
      </div>
    </div>
  </div>
</div>
<%- include('../partials/footer') %>

<style>
  /* 편집 가능한 영역 스타일 */
  .editable {
    min-height: 1.5em;
    padding: 4px;
    border-radius: 4px;
    transition: background-color 0.2s;
  }
  
  .editable:empty::before {
    content: attr(data-placeholder);
    color: #aaa;
    font-style: italic;
  }
  
  .editable:hover {
    background-color: rgba(0, 123, 255, 0.05);
  }
  
  .editable:focus {
    outline: none;
    background-color: rgba(0, 123, 255, 0.1);
    box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
  }
  
  /* 날짜 입력 스타일 조정 */
  .date-input {
    border: none;
    background: transparent;
    font-size: 0.9rem;
    width: 130px;
    padding: 2px;
  }
  
  .date-input:focus {
    outline: none;
    box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
    background-color: #fff;
  }
  
  /* A4 용지 크기에 맞는 스타일 */
  @media screen {
    .a4-page {
      width: 100%;
      max-width: 100%;
      margin: 0 auto;
      background: white;
      padding: 20px;
      box-sizing: border-box;
    }
    
    .fixed-width {
      width: 100% !important;
      table-layout: fixed;
    }
    
    /* 스크롤 제거 */
    .evaluation-container {
      width: 100%;
      overflow-x: visible;
    }
  }
  
  /* 인쇄 시 적용되는 스타일 */
  @media print {
    @page {
      size: A4 portrait;
      margin: 0.5cm;
    }
    
    /* 인쇄 시 요소 숨김 방식 변경 */
    body > *:not(#printableReport) {
      display: none !important;
    }
    
    #printableReport {
      display: block !important;
      visibility: visible !important;
      width: 21cm;
      min-height: 29.7cm;
      position: absolute;
      top: 0;
      left: 0;
      margin: 0;
      padding: 1cm;
      box-sizing: border-box;
      page-break-after: always;
      background: white;
    }
    
    #printableReport * {
      visibility: visible !important;
    }
    
    .fixed-width {
      width: 100% !important;
      table-layout: fixed;
    }
    
    /* 내용이 많아질 경우 자동으로 페이지 나누기 */
    .evaluation-container {
      page-break-inside: auto;
      overflow: visible !important;
    }
    
    tr {
      page-break-inside: avoid;
    }
    
    .page-footer {
      position: fixed;
      bottom: 0.5cm;
      left: 0;
      right: 0;
      text-align: center;
    }
    
    /* 다음 요소들은 명시적으로 숨김 */
    header, footer, 
    .navbar, .btn, 
    .toast-container,
    .card-header {
      display: none !important;
    }
    
    /* 편집 가능한 요소 인쇄 스타일 */
    .editable {
      border: none !important;
      background-color: transparent !important;
      box-shadow: none !important;
    }
    
    /* 날짜 입력 필드 인쇄 스타일 */
    .date-input {
      border: none !important;
      background-color: transparent !important;
      box-shadow: none !important;
      -webkit-appearance: none;
      -moz-appearance: none;
      appearance: none;
    }
  }
  
  /* 테이블 열 너비 고정 */
  th, td {
    word-wrap: break-word;
    overflow-wrap: break-word;
  }
  
  /* 선생님 의견 영역 스타일 */
  .teacher-comment-area {
    border: 1px solid #dee2e6;
    border-radius: 4px;
    padding: 1rem;
    min-height: 100px;
  }
  
  /* 도서 썸네일 이미지 스타일 */
  .book-thumbnail {
    max-height: 150px;
    max-width: 100%;
    object-fit: contain;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', async function() {
    // URL에서 카테고리와 볼륨 값 가져오기
    const pathParts = window.location.pathname.split('/');
    const category = decodeURIComponent(pathParts[pathParts.length - 2]);
    const volume = decodeURIComponent(pathParts[pathParts.length - 1]);
    
    console.log("리포트 생성 페이지 로드:", { 경로: window.location.pathname, 카테고리: category, 볼륨: volume });
    
    // 알림 토스트 관련 요소
    const toast = new bootstrap.Toast(document.querySelector('.toast'));
    const toastMessageElement = document.getElementById('toastMessage');
    
    // 초기 로딩 상태
    const loadingElement = document.getElementById('loading');
    const reportContentElement = document.getElementById('reportContent');
    
    // 리포트 요소
    const reportTitleElement = document.getElementById('reportTitle');
    const programNameCell = document.getElementById('programNameCell');
    const contentsTitle = document.getElementById('contentsTitle');
    const bookThumbnailsCell = document.getElementById('bookThumbnailsCell');
    const evaluationTableBody = document.getElementById('evaluationTableBody');
    
    // 현재 날짜 설정 (오늘 및 1개월 전)
    const today = new Date();
    const oneMonthAgo = new Date();
    oneMonthAgo.setMonth(today.getMonth() - 1);
    
    // 저장 버튼 이벤트
    document.getElementById('saveBtn').addEventListener('click', function() {
      saveAllData();
      showNotification('모든 내용이 임시저장되었습니다');
    });
    
    // 카테고리 이름 매핑 (영문 -> 한글)
    const categoryMapping = {
      'preschool': '프리스쿨',
      'junior': '주니어',
      'cps': 'CPS',
      'cpa': 'CPA',
      'ctr_appinventor': 'CTR앱인벤터',
      'ctr_python': 'CTR파이썬'
    };
    
    try {
      // 교재 정보 가져오기 - 원래 API 경로 유지
      console.log(`API 호출: /report/book/${category}/${volume}`);
      const response = await fetch(`/report/book/${category}/${volume}`);
      
      if (!response.ok) {
        console.error(`API 응답 오류: ${response.status} ${response.statusText}`);
        throw new Error(`교재 정보를 불러오는데 실패했습니다. 상태 코드: ${response.status}`);
      }
      
      const data = await response.json();
      console.log("API 응답 데이터:", data);
      
      // 리포트 제목 설정
      const displayCategory = categoryMapping[category] || category;
      reportTitleElement.textContent = `${displayCategory} ${volume}호`;
      
      // 프로그램 이름 설정
      programNameCell.textContent = displayCategory;
      
      // 컨텐츠 타이틀 설정
      contentsTitle.textContent = `${displayCategory} CT컴퓨팅 사고력 신규확장 콘텐츠`;
      
      // 썸네일 이미지 표시
      if (data.book && data.book.thumbnail) {
        bookThumbnailsCell.innerHTML = `
          <img src="${data.book.thumbnail}" alt="${data.book.title}" class="book-thumbnail">
          <p class="small mt-2">${data.book.title}</p>
        `;
      } else if (data.book) {
        bookThumbnailsCell.innerHTML = `
          <p class="text-muted small">이미지 없음</p>
          <p class="small mt-2">${data.book.title}</p>
        `;
      } else {
        console.error("교재 정보가 올바르지 않습니다:", data);
        bookThumbnailsCell.innerHTML = `
          <p class="text-danger">교재 정보를 불러올 수 없습니다</p>
        `;
      }
      
      // 평가 항목 테이블 생성
      try {
        if (data.evaluationItems && Array.isArray(data.evaluationItems) && data.evaluationItems.length > 0) {
          console.log("평가 항목 수:", data.evaluationItems.length);
          evaluationTableBody.innerHTML = '';
          
          data.evaluationItems.forEach((item, index) => {
            const row = document.createElement('tr');
            
            // 라디오 버튼의 name은 각 항목별로 고유해야 함
            const radioName = `evaluation-${index}`;
            const storageKey = `${category}-${volume}-${radioName}`;
            
            row.innerHTML = `
              <td class="text-center">${item.id || index + 1}</td>
              <td class="text-center">${item.principle || ''}</td>
              <td>${item.description || ''}</td>
              <td class="text-center">
                <div class="form-check form-check-inline justify-content-center">
                  <input class="form-check-input evaluation-radio" type="radio" 
                    name="${radioName}" id="${radioName}-high" value="상" 
                    data-storage-key="${storageKey}">
                </div>
              </td>
              <td class="text-center">
                <div class="form-check form-check-inline justify-content-center">
                  <input class="form-check-input evaluation-radio" type="radio" 
                    name="${radioName}" id="${radioName}-mid" value="중"
                    data-storage-key="${storageKey}">
                </div>
              </td>
              <td class="text-center">
                <div class="form-check form-check-inline justify-content-center">
                  <input class="form-check-input evaluation-radio" type="radio" 
                    name="${radioName}" id="${radioName}-low" value="하"
                    data-storage-key="${storageKey}">
                </div>
              </td>
            `;
            evaluationTableBody.appendChild(row);
          });
          
          // 평가 항목이 많을 경우 페이지 나누기를 위한 처리
          handlePageBreaks(data.evaluationItems.length);
          
          // 라디오 버튼 이벤트 설정
          setupRadioButtonEvents();
        } else {
          console.warn("평가 항목이 없거나 올바른 형식이 아닙니다:", data.evaluationItems);
          evaluationTableBody.innerHTML = `
            <tr>
              <td colspan="6" class="text-center text-muted py-3">
                평가 항목이 없습니다.
              </td>
            </tr>
          `;
        }
      } catch (err) {
        console.error("평가 항목 처리 중 오류 발생:", err);
        evaluationTableBody.innerHTML = `
          <tr>
            <td colspan="6" class="text-center text-danger">
              <i class="bi bi-exclamation-triangle me-2"></i>평가 항목을 처리하는 중 오류가 발생했습니다.
            </td>
          </tr>
        `;
      }
      
      // 로딩 완료 후 컨텐츠 표시
      loadingElement.classList.add('d-none');
      reportContentElement.classList.remove('d-none');
      
      // 편집 가능한 요소 설정
      setupEditableElements();
      
      // 날짜 입력 필드 설정
      setupDateInputs();
      
      // 저장된 데이터 불러오기
      loadSavedData(category, volume);
      
      console.log("교재 정보 로딩 완료:", {
        제목: data.book.title,
        카테고리: displayCategory,
        평가항목수: data.evaluationItems ? data.evaluationItems.length : 0
      });
      
    } catch (error) {
      console.error('Error:', error);
      loadingElement.innerHTML = `
        <div class="alert alert-danger">
          <i class="bi bi-exclamation-circle me-2"></i>
          교재 정보를 불러오는 중 오류가 발생했습니다: ${error.message}
        </div>
      `;
    }
    
    // 편집 가능한 요소 설정
    function setupEditableElements() {
      const editableElements = document.querySelectorAll('.editable');
      
      editableElements.forEach(element => {
        // 포커스 아웃 시 저장
        element.addEventListener('blur', function() {
          const key = this.getAttribute('data-storage-key');
          if (key) {
            const reportKey = `${category}-${volume}-${key}`;
            localStorage.setItem(reportKey, this.innerText);
          }
        });
        
        // 엔터 키 차단 (줄바꿈 방지)
        element.addEventListener('keydown', function(e) {
          if (e.key === 'Enter' && !e.shiftKey) {
            if (this.id !== 'teacherCommentCell') { // 선생님 의견은 엔터 허용
              e.preventDefault();
              this.blur();
            }
          }
        });
      });
    }
    
    // 날짜 입력 필드 설정
    function setupDateInputs() {
      const startDateInput = document.getElementById('startDate');
      const endDateInput = document.getElementById('endDate');
      
      // 기본값 설정
      startDateInput.value = formatDateForInput(oneMonthAgo);
      endDateInput.value = formatDateForInput(today);
      
      // 변경 이벤트
      [startDateInput, endDateInput].forEach(input => {
        input.addEventListener('change', function() {
          const key = this.getAttribute('data-storage-key');
          if (key) {
            const reportKey = `${category}-${volume}-${key}`;
            localStorage.setItem(reportKey, this.value);
          }
        });
      });
    }
    
    // 라디오 버튼 이벤트 설정
    function setupRadioButtonEvents() {
      const radioButtons = document.querySelectorAll('.evaluation-radio');
      
      radioButtons.forEach(radio => {
        radio.addEventListener('change', function() {
          if (this.checked) {
            const key = this.getAttribute('data-storage-key');
            if (key) {
              localStorage.setItem(key, this.value);
            }
          }
        });
      });
    }
    
    // 저장된 데이터 불러오기
    function loadSavedData(category, volume) {
      // 문자열 데이터 불러오기
      document.querySelectorAll('.editable[data-storage-key]').forEach(element => {
        const key = element.getAttribute('data-storage-key');
        const reportKey = `${category}-${volume}-${key}`;
        const savedValue = localStorage.getItem(reportKey);
        
        if (savedValue) {
          element.innerText = savedValue;
        }
      });
      
      // 날짜 데이터 불러오기
      document.querySelectorAll('input[type="date"][data-storage-key]').forEach(element => {
        const key = element.getAttribute('data-storage-key');
        const reportKey = `${category}-${volume}-${key}`;
        const savedValue = localStorage.getItem(reportKey);
        
        if (savedValue) {
          element.value = savedValue;
        }
      });
      
      // 라디오 버튼 데이터 불러오기
      document.querySelectorAll('.evaluation-radio').forEach(radio => {
        const key = radio.getAttribute('data-storage-key');
        if (key) {
          const savedValue = localStorage.getItem(key);
          if (savedValue && radio.value === savedValue) {
            radio.checked = true;
          } else if (!savedValue && radio.value === '상') {
            // 저장된 값이 없으면 기본값으로 '상' 선택
            radio.checked = true;
          }
        }
      });
    }
    
    // 모든 데이터 저장
    function saveAllData() {
      // 편집 가능한 텍스트 저장
      document.querySelectorAll('.editable[data-storage-key]').forEach(element => {
        const key = element.getAttribute('data-storage-key');
        const reportKey = `${category}-${volume}-${key}`;
        localStorage.setItem(reportKey, element.innerText);
      });
      
      // 날짜 입력 저장
      document.querySelectorAll('input[type="date"][data-storage-key]').forEach(element => {
        const key = element.getAttribute('data-storage-key');
        const reportKey = `${category}-${volume}-${key}`;
        localStorage.setItem(reportKey, element.value);
      });
      
      // 라디오 버튼 선택 저장
      document.querySelectorAll('.evaluation-radio:checked').forEach(radio => {
        const key = radio.getAttribute('data-storage-key');
        if (key) {
          localStorage.setItem(key, radio.value);
        }
      });
      
      // 저장 시각 기록
      localStorage.setItem(`${category}-${volume}-lastSaved`, new Date().toISOString());
    }
    
    // 평가 항목 수에 따른 페이지 나누기 처리
    function handlePageBreaks(itemCount) {
      // 항목이 많을 경우(예: 7개 이상) 자동으로 페이지 나누기 설정
      if (itemCount > 7) {
        document.querySelector('.evaluation-container').classList.add('multi-page');
      }
    }
    
    // 알림 표시 함수
    function showNotification(message) {
      toastMessageElement.textContent = message;
      toast.show();
    }
    
    // 인쇄 버튼 이벤트
    const printBtn = document.getElementById('printBtn');
    if (printBtn) {
      printBtn.addEventListener('click', function() {
        // 인쇄 전 데이터 저장
        saveAllData();
        
        // 인쇄 다이얼로그 표시
        window.print();
      });
    }
    
    // 날짜 포맷 함수 (YYYY-MM-DD)
    function formatDateForInput(date) {
      return date.toISOString().split('T')[0];
    }
  });
</script>