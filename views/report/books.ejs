<!-- books.ejs - 교재 선택 페이지 템플릿 -->

<!-- CSS 파일 참조 추가 -->
<link rel="stylesheet" href="/css/report.css">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.3/font/bootstrap-icons.css">

<%- include('../partials/header') %>

<div class="container mt-5"> 
  <div class="row mb-4">
    <div class="col-md-8 offset-md-2">
      <h1 class="text-center fw-bold mb-2">월간 학습리포트 POD</h1>
      <p class="text-center text-muted">교재 카테고리와 호수를 선택하여 학습 리포트를 생성하세요</p>
    </div>
  </div>
  
  <div class="row">
    <div class="col-md-10 offset-md-1">
      <!-- 코스 컨테이너 -->
      <div class="card shadow-sm">
        <div class="card-header bg-primary text-white">
          <h4 class="mb-0">교재 선택</h4>
        </div>
        <div class="card-body p-3" id="categoryContainer">
          <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
              <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-2">교재 정보를 불러오는 중...</p>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- 호수 선택 모달 템플릿 -->
<div class="modal fade" id="volumeModal" tabindex="-1" aria-labelledby="volumeModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="volumeModalLabel">호수 선택</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div class="volume-buttons d-flex flex-wrap gap-2">
          <!-- 여기에 선택된 카테고리의 호수 버튼이 동적으로 생성됩니다 -->
        </div>
      </div>
    </div>
  </div>
</div>

<%- include('../partials/footer') %>

<!-- 교재 선택 스크립트 인라인 추가 -->
<script>
// books.js - 교재 선택 화면 구현
document.addEventListener('DOMContentLoaded', function() {
  // 메인 컨테이너 요소 확인
  const categoryContainer = document.getElementById('categoryContainer');
  if (!categoryContainer) {
    console.error('categoryContainer 요소를 찾을 수 없습니다.');
    return;
  }
  
  // API 호출에서 오류가 발생하는지 확인하기 위한 테스트
  console.log('API 호출 테스트');
  fetch('/report/books')
    .then(response => {
      console.log('API 응답:', response);
      if (!response.ok) {
        throw new Error(`API 응답 오류: ${response.status}`);
      }
      return response.text(); // 먼저 텍스트로 받아보고
    })
    .then(text => {
      console.log('응답 텍스트 미리보기:', text.substring(0, 100));
      // JSON 파싱 시도
      try {
        return JSON.parse(text);
      } catch (error) {
        console.error('JSON 파싱 오류:', error);
        console.log('서버 응답:', text);
        throw new Error('서버에서 올바른 JSON을 반환하지 않았습니다');
      }
    })
    .then(data => {
      console.log('파싱된 데이터:', data);
      // 여기에 원래 데이터 처리 코드 넣기
      displayBooks(data);
    })
    .catch(error => {
      console.error('API 호출 오류:', error);
      categoryContainer.innerHTML = `
        <div class="alert alert-danger">
          <i class="bi bi-exclamation-circle me-2"></i>
          교재 정보를 불러오는 중 오류가 발생했습니다: ${error.message}
        </div>
      `;
    });
    
  // 교재 표시 함수
  function displayBooks(data) {
    // 컨테이너 초기화
    categoryContainer.innerHTML = '';
    
    // 데이터가 없는 경우
    if (!data || Object.keys(data).length === 0) {
      categoryContainer.innerHTML = `
        <div class="alert alert-warning">
          <i class="bi bi-exclamation-triangle me-2"></i>
          사용 가능한 교재 정보가 없습니다.
        </div>
      `;
      return;
    }
    
    // 카테고리별 교재 표시
    Object.keys(data).forEach(category => {
      const volumes = data[category];
      
      // 카테고리 섹션 생성
      const categorySection = document.createElement('div');
      categorySection.className = 'category-section mb-4';
      
      // 카테고리 제목 생성
      const categoryTitle = document.createElement('h5');
      categoryTitle.className = 'category-title bg-light p-2 rounded mb-3';
      categoryTitle.textContent = getCategoryDisplayName(category);
      
      // 교재 버튼 컨테이너
      const volumeWrapper = document.createElement('div');
      volumeWrapper.className = 'd-flex flex-wrap gap-2';
      
      // 정렬된 교재 목록
      const sortedVolumes = [...volumes].sort((a, b) => {
        return parseInt(a.volume) - parseInt(b.volume);
      });
      
      // 각 교재 버튼 생성
      sortedVolumes.forEach(book => {
        if (!book.volume) return;
        
        const volumeBtn = document.createElement('a');
        volumeBtn.href = `/report/generate/${encodeURIComponent(category)}/${encodeURIComponent(book.volume)}`;
        volumeBtn.className = 'btn btn-outline-primary';
        volumeBtn.textContent = `${book.volume}호`;
        
        volumeWrapper.appendChild(volumeBtn);
      });
      
      // 요소 결합
      categorySection.appendChild(categoryTitle);
      categorySection.appendChild(volumeWrapper);
      
      // 컨테이너에 추가
      categoryContainer.appendChild(categorySection);
    });
  }
  
  // 카테고리 이름 표시 함수
  function getCategoryDisplayName(category) {
    const mapping = {
      'preschool_lv1': '프리스쿨 LV1',
      'preschool_lv2': '프리스쿨 LV2',
      'preschool_lv3': '프리스쿨 LV3',
      'junior_lv1': '주니어 LV1',
      'junior_lv2': '주니어 LV2',
      'cps': 'CPS',
      'cpa': 'CPA',
      'appinventor': '앱인벤터',
      'python': '파이썬'
    };
    
    return mapping[category] || category;
  }
});
</script>