<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">   
    <title>코딩앤플레이 - 쉽게 배우는 프로그래밍</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-icons/1.11.3/font/bootstrap-icons.min.css">
    <link rel="stylesheet" href="/css/styles.css">
    <script src="https://apis.google.com/js/api.js"></script>

    <!-- 필요한 hidden input 요소 추가 -->
    <input type="hidden" id="googleApiKey" value="<%= process.env.GOOGLE_API_KEY %>">
    <input type="hidden" id="spreadsheetId" value="<%= process.env.SPREADSHEET_ID %>">
    <input type="hidden" id="discoveryDocs" value="<%= process.env.DISCOVERY_DOCS %>">
</head>

<!-- header.ejs 상단에 추가 -->
<div style="background-color: #ffeeee; padding: 5px; font-size: 12px;">
    <strong>세션 정보:</strong> 
    userID: <%= JSON.stringify(locals.userID) || '없음' %>, 
    role: <%= JSON.stringify(locals.role) || '없음' %>,
    userRole: <%= JSON.stringify(locals.userRole) || '없음' %>,
    현재 시간: <%= new Date().toISOString() %>
  </div>

<header class="navbar navbar-expand-lg navbar-light bg-light shadow-sm">
    <div class="container-fluid">
        <a class="navbar-brand d-flex align-items-center" href="/">
            <img src="/resource/codingnplay_logo.png" alt="Logo" style="width: 190px; height: 50px;">
        </a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarContent" aria-controls="navbarContent" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarContent">
            <form class="d-flex mx-auto" style="max-width: 400px;">
                <input class="form-control me-2" type="search" placeholder="Search..." aria-label="Search" style="font-size: 16px; padding: 8px;">
            </form>          
            <div class="d-flex align-items-center">
                <% if (role === 'admin' || role === 'teacher' || role === 'manager') { %>
                    <div class="nav-item dropdown me-4"> <!-- me-4 클래스 추가하여 오른쪽 여백 추가 -->
                        <a class="nav-link dropdown-toggle" href="#" id="teacherResourcesDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                            교사 전용페이지
                        </a>
                        <ul class="dropdown-menu" aria-labelledby="teacherResourcesDropdown">
                            <li>
                                <a class="dropdown-item" href="https://shop.codingnplay.co.kr/" target="_blank">
                                    <img src="/resource/imweb.png" alt="교재" width="20" height="20" class="me-2"> 교재몰
                                </a>
                            </li>
                            <li>
                                <a class="dropdown-item" href="https://www.miricanvas.com/workspace/team/drive" target="_blank">
                                    <img src="/resource/miricanvas.png" alt="홍보" width="20" height="20" class="me-2"> 홍보물
                                </a>
                            </li>
                            <li>
                                <a class="dropdown-item" href="http://naver.me/5YwLMZzj" target="_blank">
                                    <img src="/resource/navermybox.jpg" alt="운영자료" width="20" height="20" class="me-2"> 운영자료
                                </a>
                            </li>
                            <li>
                                <a class="dropdown-item" href="https://edu.codingnplay.co.kr/" target="_blank">
                                    <img src="/resource/glide.png" alt="지도서 영상보기" width="20" height="20" class="me-2"> 지도서 영상보기
                                </a>
                            </li>
                            <li>
                                <a class="dropdown-item" href="https://app.codingnplay.co.kr/report/books-page">
                                    <i class="bi bi-clipboard-check me-2"></i> 평가지 출력
                                </a>
                            </li>
                            <li>
                                <a class="dropdown-item" href="https://codingnplay.co.kr/%ec%bd%94%ed%94%8c%ec%86%8c%ec%8b%9d/" target="_blank">
                                    <i class="bi bi-award me-2"></i> 자격증/행사
                                </a>
                            </li>
                            <li>
                                <a class="dropdown-item" href="https://us02web.zoom.us/j/3566471255?pwd=U3hGeFJ4dVZnYlRVNThTcHVKbUxTUT09" target="_blank">
                                    <img src="/resource/zoom.png" alt="줌 회의실" width="20" height="20" class="me-2"> 줌 회의실
                                </a>
                            </li>
                            <li>
                                <a class="dropdown-item" href="https://app.codingnplay.co.kr/board" target="_blank">
                                    <img src="/resource/co.ico" alt="일해라너구리" width="20" height="20" class="me-2"> 일해라너구리
                                </a>
                            </li>
                        </ul>
                    </div>
                <% } %>
                
                <!-- 프로필 드롭다운 -->
                <div class="nav-item dropdown">
                    <a class="nav-link dropdown-toggle d-flex align-items-center" href="#" id="profileDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false" style="padding: 0;">
                        <img src="/resource/profiles/default.webp" alt="Profile" id="profileImage" class="rounded-circle" style="width: 40px; height: 40px;">
                        <span id="userName" class="ms-2"><%= locals.userID || '게스트' %></span>
                    </a>

                    <%
                    function canAccess(feature) {
                        const permissions = require('../../lib_login/permissions');
                        return permissions.hasFeatureAccess(locals.role, feature);
                    }
                    %> 

                    <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="profileDropdown">
                        <li class="px-3 py-2 text-muted">
                            <div class="d-flex align-items-center">
                                <img src="/resource/profiles/default.webp" alt="Profile" id="profileDropdownImage" class="rounded-circle" style="width: 50px; height: 50px;">
                                <div class="ms-3">
                                    <div id="profileDropdownUserID"><%= locals.userID || '게스트' %></div>
                                    <div class="small text-muted" id="profileDropdownRole"><%= locals.role || 'guest' %></div>
                                </div>
                            </div>
                        </li>
                        <li><hr class="dropdown-divider"></li>
                        <li>
                            <button class="dropdown-item" type="button" data-bs-toggle="modal" data-bs-target="#profileModal">
                                <i class="bi bi-person-fill me-2"></i>프로필 선택
                            </button>
                        </li>
                        <li>
                            <a class="dropdown-item" href="/logout">
                                <i class="bi bi-box-arrow-right me-2"></i>로그아웃
                            </a>
                        </li>
                    </ul>
                </div>
                               
            </div>
        </div>
    </div>
</header>
<!-- 프로필 선택 모달 -->
<div class="modal fade" id="profileModal" tabindex="-1" aria-labelledby="profileModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="profileModalLabel">프로필 선택</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- 기본 프로필 이미지 선택 -->
                <h6 class="mb-3">기본 프로필</h6>
                <div class="d-flex flex-wrap justify-content-center mb-4" id="defaultProfileContainer">
                    <!-- 기본 프로필 이미지들이 JS로 동적으로 추가됩니다 -->
                </div>
                
                <!-- 프로필 이미지 업로드 -->
                <h6 class="mb-3">프로필 업로드</h6>
                <form id="profileUploadForm" enctype="multipart/form-data">
                    <div class="mb-3">
                        <input class="form-control" type="file" id="profileImageUpload" accept="image/*">
                        <div class="form-text">최대 1MB 크기의 이미지만 업로드 가능합니다.</div>
                    </div>
                    <div class="d-flex justify-content-end">
                        <button type="submit" class="btn btn-primary">업로드</button>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">닫기</button>
                <button type="button" class="btn btn-primary" id="saveProfileButton">저장</button>
            </div>
        </div>
    </div>
</div>

<!-- 스크립트 부분 -->
<script defer src="/header.js"></script>
<script>
    // 비활동 시간 확인 및 로그아웃 처리
    let idleTime = 0;
    function resetIdleTimer() {
        idleTime = 0;
    }
    function checkIdleTime() {
        idleTime += 1;
        if (idleTime >= 30) { // 30분 동안 활동이 없으면 로그아웃
            alert("일정시간동안 활동이 없어, 로그아웃되었습니다.");
            window.location.href = '/logout';
        }
    }
    setInterval(checkIdleTime, 60 * 1000); // 1분 간격으로 체크

document.addEventListener('DOMContentLoaded', function() {
    // 세션에서 사용자 정보 사용 (로컬 스토리지 사용 제거)
    const sessionUserID = "<%= locals.userID || '게스트' %>";
    const sessionUserRole = "<%= locals.role || 'guest' %>";
    
    // 프로필 이미지는 기본 이미지 사용
    const defaultProfileImage = '/resource/profiles/default.webp';
    
    // 프로필 이미지 설정
    const profileImage = document.getElementById('profileImage');
    const profileDropdownImage = document.getElementById('profileDropdownImage');
    
    if (profileImage) profileImage.src = defaultProfileImage;
    if (profileDropdownImage) profileDropdownImage.src = defaultProfileImage;
    
    // 사용자 이름 설정
    const userNameElement = document.getElementById('userName');
    const profileDropdownUserID = document.getElementById('profileDropdownUserID');
    const profileDropdownRole = document.getElementById('profileDropdownRole');
    
    if (userNameElement) userNameElement.textContent = sessionUserID;
    if (profileDropdownUserID) profileDropdownUserID.textContent = sessionUserID;
    if (profileDropdownRole) profileDropdownRole.textContent = sessionUserRole;
    
    // 기본 프로필 이미지 목록
    const defaultProfiles = [
        '/resource/profiles/default.webp',
        '/resource/profiles/profile1.webp',
        '/resource/profiles/profile2.webp',
        '/resource/profiles/profile3.webp',
        '/resource/profiles/profile4.webp',
        '/resource/profiles/profile5.webp'
    ];
    
    // 기본 프로필 이미지 로드
    const defaultProfileContainer = document.getElementById('defaultProfileContainer');
    
    if (defaultProfileContainer) {
        defaultProfileContainer.innerHTML = '';
        
        defaultProfiles.forEach(profile => {
            const profileDiv = document.createElement('div');
            profileDiv.className = `profile-image-item m-2 ${profile === defaultProfileImage ? 'selected' : ''}`;
            profileDiv.dataset.profile = profile;
            
            profileDiv.innerHTML = `
                <img src="${profile}" alt="Profile" class="rounded-circle" 
                     style="width: 60px; height: 60px; cursor: pointer; 
                     ${profile === defaultProfileImage ? 'border: 3px solid #0d6efd;' : ''}">
            `;
            
            profileDiv.addEventListener('click', function() {
                // 모든 프로필에서 선택 표시 제거
                document.querySelectorAll('.profile-image-item').forEach(item => {
                    item.classList.remove('selected');
                    item.querySelector('img').style.border = 'none';
                });
                
                // 현재 선택된 프로필에 선택 표시 추가
                this.classList.add('selected');
                this.querySelector('img').style.border = '3px solid #0d6efd';
                
                // 선택된 프로필 저장 (세션에 저장하도록 API 호출)
                const selectedProfile = this.dataset.profile;
                saveProfileToSession(selectedProfile);
            });
            
            defaultProfileContainer.appendChild(profileDiv);
        });
    }
    
    // 세션에 프로필 저장하는 함수
    function saveProfileToSession(profilePath) {
        fetch('/api/save-profile-preference', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ profilePath: profilePath })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                // 프로필 이미지 업데이트
                if (profileImage) profileImage.src = profilePath;
                if (profileDropdownImage) profileDropdownImage.src = profilePath;
            } else {
                alert('프로필 저장 실패: ' + (data.message || '알 수 없는 오류'));
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('프로필 저장 중 오류가 발생했습니다.');
        });
    }
    
    // 프로필 업로드 처리
    const profileUploadForm = document.getElementById('profileUploadForm');
    if (profileUploadForm) {
        profileUploadForm.addEventListener('submit', function(e) {
            e.preventDefault();
            
            const fileInput = document.getElementById('profileImageUpload');
            const file = fileInput.files[0];
            
            if (!file) {
                alert('파일을 선택해주세요.');
                return;
            }
            
            // 파일 크기 제한 (1MB)
            if (file.size > 1024 * 1024) {
                alert('1MB 이하의 파일만 업로드 가능합니다.');
                return;
            }
            
            // FormData 생성
            const formData = new FormData();
            formData.append('profileImage', file);
            
            // 서버에 프로필 이미지 업로드
            fetch('/api/upload-profile', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // 업로드된 이미지 경로
                    const uploadedImagePath = data.imagePath;
                    
                    // 업로드된 이미지를 선택 옵션에 추가
                    const profileDiv = document.createElement('div');
                    profileDiv.className = 'profile-image-item m-2 selected';
                    profileDiv.dataset.profile = uploadedImagePath;
                    
                    profileDiv.innerHTML = `
                        <img src="${uploadedImagePath}" alt="Uploaded Profile" class="rounded-circle" 
                             style="width: 60px; height: 60px; cursor: pointer; border: 3px solid #0d6efd;">
                    `;
                    
                    // 모든 프로필에서 선택 표시 제거
                    document.querySelectorAll('.profile-image-item').forEach(item => {
                        item.classList.remove('selected');
                        item.querySelector('img').style.border = 'none';
                    });
                    
                    // 업로드된 이미지를 컨테이너에 추가
                    defaultProfileContainer.appendChild(profileDiv);
                    
                    // 업로드된 이미지를 세션에 저장
                    saveProfileToSession(uploadedImagePath);
                    
                    // 폼 초기화
                    fileInput.value = '';
                    
                    alert('프로필 이미지가 업로드되었습니다.');
                } else {
                    alert('업로드 실패: ' + (data.message || '알 수 없는 오류'));
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('업로드 중 오류가 발생했습니다.');
            });
        });
    }
    
    // 프로필 저장 버튼
    const saveProfileButton = document.getElementById('saveProfileButton');
    if (saveProfileButton) {
        saveProfileButton.addEventListener('click', function() {
            // 현재 선택된 프로필 찾기
            const selectedItem = document.querySelector('.profile-image-item.selected');
            if (selectedItem) {
                const selectedProfile = selectedItem.dataset.profile;
                
                // 세션에 저장
                saveProfileToSession(selectedProfile);
                
                // 모달 닫기
                const modal = bootstrap.Modal.getInstance(document.getElementById('profileModal'));
                if (modal) modal.hide();
            }
        });
    }
    
    // 모든 사용자 활동에 대해 idle 타이머 리셋
    document.addEventListener('mousemove', resetIdleTimer);
    document.addEventListener('keypress', resetIdleTimer);
    document.addEventListener('click', resetIdleTimer);
    document.addEventListener('scroll', resetIdleTimer);
});    
</script>
