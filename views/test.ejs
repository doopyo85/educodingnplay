<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>코딩앤아카데미 - 쉽게 배우는 프로그래밍</title>
    
    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css">
    
    <!-- Simple Code Editor CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/simple-code-editor@latest/dist/simple-code-editor.min.css">
    
    <!-- Custom CSS -->
    <link rel="stylesheet" href="/public/test.css">
    
    <style>
        .ide-container code-editor {
            width: 100% !important;
            height: 70vh !important;
        }
    </style>

    <!-- Hidden inputs -->
    <input type="hidden" id="googleApiKey" value="<%= googleApiKey %>">
    <input type="hidden" id="spreadsheetId" value="<%= spreadsheetId %>">
    <input type="hidden" id="discoveryDocs" value="<%= discoveryDocs %>">
</head>
<body>
    <%- include('partials/header') %>
    <div class="main-container">
        <nav class="nav-container">
            <ul id="navList" class="list-unstyled">
                <!-- Google Sheets에서 동적으로 메뉴 추가 -->
            </ul>
        </nav>
        <div class="contents">
            <div class="content-container">
                <div id="problem-navigation-container">
                    <i class="bi bi-chevron-left" id="prev-problem"></i>
                    <div id="problem-navigation"></div>
                    <i class="bi bi-chevron-right" id="next-problem"></i>
                </div>
                <div id="problem-title"></div>
                <div id="problem-container">
                    <iframe id="iframeContent" src="about:blank"></iframe>
                </div>
            </div>
            <div class="ide-container">
                <div id="app">
                    <!-- Vue app will be mounted here -->
                </div>
            </div>
        </div>
    </div>
    <div id="dynamic-content"></div>

    <!-- Scripts -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    
    <!-- Vue 3 -->
    <script src="https://cdn.jsdelivr.net/npm/vue@3/dist/vue.global.js"></script>

    <!-- Simple Code Editor -->
    <script src="https://cdn.jsdelivr.net/npm/simple-code-editor@latest/dist/simple-code-editor.min.js"></script>

    <!-- highlight.js -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.5.1/highlight.min.js"></script>
    
    <!-- Custom Scripts -->
    <script src="/public/header.js"></script>
    <script src="/public/test.js"></script>

    <script>
        const app = Vue.createApp({
            data() {
                return {
                    code: '',
                    output: '',
                    currentProblem: null
                };
            },
            template: `
            <code-editor 
                ref="editor"
                v-model="code"
                theme="vs2015" 
                :line-nums="true" 
                :languages="[['python', 'Python'], ['cpp', 'C++']]"
                default-language="python"
                @update:modelValue="onCodeChange">
            </code-editor>
            
            <button @click="runCode" class="btn btn-primary mt-3">Run Code</button>
    
            <div id="output-terminal" class="mt-3">
                <h3>Output:</h3>
                <pre id="output-content" class="p-3 bg-dark text-light">{{ output }}</pre>
            </div>
            `,
            methods: {
                onCodeChange(newCode) {
                    this.code = newCode;
                },
                runCode() {
                    // Here you would typically send the code to your backend for execution
                    this.output = `Running code:\n${this.code}`;
                },
                applyCustomStyles() {
                    const editorElement = this.$refs.editor.$el;
                    if (editorElement) {
                        editorElement.style.setProperty('width', '100%', 'important');
                        editorElement.style.setProperty('height', '70vh', 'important');
                    }
                },
                updateProblem(problem) {
                    this.currentProblem = problem;
                    // You might want to update the code editor content here based on the problem
                }
            },
            mounted() {
                this.$nextTick(() => {
                    this.applyCustomStyles();
                });
                // Expose the updateProblem method to the global scope
                window.updateEditorProblem = this.updateProblem;
            }
        });

        // Make sure SimpleCodeEditor is loaded before registering the component
        if (typeof SimpleCodeEditor !== 'undefined') {
            app.component('code-editor', SimpleCodeEditor);
            app.mount('#app');
        } else {
            console.error('SimpleCodeEditor is not loaded');
        }
    </script>
</body>
</html>
